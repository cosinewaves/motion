{"searchDocs":[{"title":"Connection","type":0,"sectionRef":"#","url":"/api/Connection","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"/api/Connection#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Connection","url":"/api/Connection#new","content":"&lt;/&gt; Connection.new( signal: {_head: Connection?},-- The signal the connection is associated with. callback: (...any) → ()-- The listener function to be called on signal fire. ) → Connection Creates a new connection object internally tied to a signal.  ","version":null,"tagName":"h3"},{"title":"Disconnect​","type":1,"pageTitle":"Connection","url":"/api/Connection#Disconnect","content":"&lt;/&gt; Connection:Disconnect() → () Disconnects the connection, preventing the callback from being called again.  ","version":null,"tagName":"h3"},{"title":"DisconnectOn​","type":1,"pageTitle":"Connection","url":"/api/Connection#DisconnectOn","content":"&lt;/&gt; Connection:DisconnectOn( instance: Instance -- The Roblox instance to track for automatic disconnection. ) → () Automatically disconnects the connection when the given Instance is destroyed.  ","version":null,"tagName":"h3"},{"title":"UntilDestroyed​","type":1,"pageTitle":"Connection","url":"/api/Connection#UntilDestroyed","content":"&lt;/&gt; Connection:UntilDestroyed( token: {__connectionCleanupCallbacks: {() → ()}}?-- The cleanup token to register with. ) → () Registers the connection to be cleaned up when a provided token object is disposed. The token should be a table that has or will have a __connectionCleanupCallbacks array field. This allows grouping multiple connections to clean up together. ","version":null,"tagName":"h3"},{"title":"Signal","type":0,"sectionRef":"#","url":"/api/Signal","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/api/Signal#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Signal","url":"/api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal&lt;T...&gt; Create a new signal  ","version":null,"tagName":"h3"},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"/api/Signal#Connect","content":"&lt;/&gt; Signal:Connect( callback: T...-- Your callback function ) → Connection Connect a signal to a callback function, which will automatically be called when your signal is Fired.  ","version":null,"tagName":"h3"},{"title":"Once​","type":1,"pageTitle":"Signal","url":"/api/Signal#Once","content":"&lt;/&gt; Signal:Once( callback: T...-- Your callback function ) → Connection Disconnect a callback function after it has been fired.  ","version":null,"tagName":"h3"},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"/api/Signal#Wait","content":"&lt;/&gt; Signal:Wait( timeoutSeconds: number?-- Defaults to one second if not provided ) → ...T Waits an amount of time before firing the signal.  ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: T...) → () Dispatches the signal to all connected listeners.  ","version":null,"tagName":"h3"},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Disconnects all connected listeners.  ","version":null,"tagName":"h3"},{"title":"Until​","type":1,"pageTitle":"Signal","url":"/api/Signal#Until","content":"&lt;/&gt; Signal:Until( predicate: ((T...) → boolean), callback: ((T...) → ()) ) → Connection Listens until the predicate evaluates to true, then disconnects.  ","version":null,"tagName":"h3"},{"title":"WhileActive​","type":1,"pageTitle":"Signal","url":"/api/Signal#WhileActive","content":"&lt;/&gt; Signal:WhileActive( check: () → boolean, callback: (T...) → () ) → Connection Fires only when the check function evaluates to true.  ","version":null,"tagName":"h3"},{"title":"ConnectForked​","type":1,"pageTitle":"Signal","url":"/api/Signal#ConnectForked","content":"&lt;/&gt; Signal:ConnectForked(callback: (T...) → ()) → Connection Fires the listener in a separate task using task.spawn, ensuring parallel execution.  ","version":null,"tagName":"h3"},{"title":"ConnectDeferred​","type":1,"pageTitle":"Signal","url":"/api/Signal#ConnectDeferred","content":"&lt;/&gt; Signal:ConnectDeferred(callback: (T...) → ()) → Connection Defers execution using task.defer, waiting until the current thread completes.  ","version":null,"tagName":"h3"},{"title":"ConnectAsync​","type":1,"pageTitle":"Signal","url":"/api/Signal#ConnectAsync","content":"&lt;/&gt; Signal:ConnectAsync(callback: (T...) → ()) → Connection Wraps the listener in a coroutine for concurrent execution.  ","version":null,"tagName":"h3"},{"title":"FireDeferred​","type":1,"pageTitle":"Signal","url":"/api/Signal#FireDeferred","content":"&lt;/&gt; Signal:FireDeferred(...: T...) → () Fires the signal using task.defer, ensuring it runs after the current execution thread completes.  ","version":null,"tagName":"h3"},{"title":"FireAsync​","type":1,"pageTitle":"Signal","url":"/api/Signal#FireAsync","content":"&lt;/&gt; Signal:FireAsync(...: T...) → () Fires the signal asynchronously using task.spawn, reducing potential performance bottlenecks.  ","version":null,"tagName":"h3"},{"title":"FireBatched​","type":1,"pageTitle":"Signal","url":"/api/Signal#FireBatched","content":"&lt;/&gt; Signal:FireBatched(...: T...Multipletablesofarguments(eacha{T...})) → () Fires multiple sets of arguments in batch mode. Each value set is dispatched in sequence using task.spawn.  ","version":null,"tagName":"h3"},{"title":"FireWithMiddleware​","type":1,"pageTitle":"Signal","url":"/api/Signal#FireWithMiddleware","content":"&lt;/&gt; Signal:FireWithMiddleware(...: T...) → () Fires the signal through any registered middleware before invoking listeners.  ","version":null,"tagName":"h3"},{"title":"Use​","type":1,"pageTitle":"Signal","url":"/api/Signal#Use","content":"&lt;/&gt; Signal:Use(middleware: ( next: (T...) → (), ...T ) → ()) → MiddlewareHandle Applies a custom middleware to intercept signal execution. Only one middleware can be active at a time.  ","version":null,"tagName":"h3"},{"title":"UseFilter​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseFilter","content":"&lt;/&gt; Signal:UseFilter(predicate: (T...) → boolean) → MiddlewareHandle Filters events based on a predicate. Only events that return true are allowed through.  ","version":null,"tagName":"h3"},{"title":"UseMap​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseMap","content":"&lt;/&gt; Signal:UseMap(mapper: (T...) → U...) → MiddlewareHandle Transforms signal arguments before they are passed to listeners.  ","version":null,"tagName":"h3"},{"title":"UseThrottle​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseThrottle","content":"&lt;/&gt; Signal:UseThrottle(seconds: number) → MiddlewareHandle Throttles the signal, allowing it to fire at most once per given time interval.  ","version":null,"tagName":"h3"},{"title":"UseDebounce​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseDebounce","content":"&lt;/&gt; Signal:UseDebounce(seconds: number) → MiddlewareHandle Debounces the signal. Only fires after no new signal is received within the given time frame.  ","version":null,"tagName":"h3"},{"title":"UseDelay​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseDelay","content":"&lt;/&gt; Signal:UseDelay(seconds: number) → MiddlewareHandle Delays the signal by the specified amount of time before calling listeners.  ","version":null,"tagName":"h3"},{"title":"UseLog​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseLog","content":"&lt;/&gt; Signal:UseLog(prefix: string?Optionallogprefix) → MiddlewareHandle Logs signal firings to the console for debugging purposes.  ","version":null,"tagName":"h3"},{"title":"UseCatch​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseCatch","content":"&lt;/&gt; Signal:UseCatch(handler: (any) → ()Errorhandlercallback) → MiddlewareHandle Wraps signal execution in a pcall, catching and handling any runtime errors.  ","version":null,"tagName":"h3"},{"title":"UseCancel​","type":1,"pageTitle":"Signal","url":"/api/Signal#UseCancel","content":"&lt;/&gt; Signal:UseCancel(predicate: (T...) → boolean) → MiddlewareHandle Cancels the signal if the given predicate returns true.  ","version":null,"tagName":"h3"},{"title":"GetListenerCount​","type":1,"pageTitle":"Signal","url":"/api/Signal#GetListenerCount","content":"&lt;/&gt; Signal:GetListenerCount() → number Returns the number of active listeners connected to the signal.  ","version":null,"tagName":"h3"},{"title":"GetConnections​","type":1,"pageTitle":"Signal","url":"/api/Signal#GetConnections","content":"&lt;/&gt; Signal:GetConnections() → {Connection} Returns a list of all connection handles attached to this signal.  ","version":null,"tagName":"h3"},{"title":"DebugDescribe​","type":1,"pageTitle":"Signal","url":"/api/Signal#DebugDescribe","content":"&lt;/&gt; Signal:DebugDescribe() → string Returns a string summary of the signal's current listener state.  ","version":null,"tagName":"h3"},{"title":"PrintDebugInfo​","type":1,"pageTitle":"Signal","url":"/api/Signal#PrintDebugInfo","content":"&lt;/&gt; Signal:PrintDebugInfo() → () Prints detailed debug information about the signal and its listeners.  ","version":null,"tagName":"h3"},{"title":"IsConnected​","type":1,"pageTitle":"Signal","url":"/api/Signal#IsConnected","content":"&lt;/&gt; Signal:IsConnected(callback: (T...) → ()) → boolean Checks if the given callback is currently connected to the signal. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}