"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[829],{6296:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new connection object internally tied to a signal.","params":[{"name":"signal","desc":"The signal the connection is associated with.","lua_type":"{ _head: Connection? }"},{"name":"callback","desc":"The listener function to be called on signal fire.","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"static","source":{"line":35,"path":"motion/connection.lua"}},{"name":"Disconnect","desc":"Disconnects the connection, preventing the callback from being called again.","params":[],"returns":[],"function_type":"method","source":{"line":51,"path":"motion/connection.lua"}},{"name":"DisconnectOn","desc":"Automatically disconnects the connection when the given Instance is destroyed.","params":[{"name":"instance","desc":"The Roblox instance to track for automatic disconnection.","lua_type":"Instance"}],"returns":[],"function_type":"method","source":{"line":77,"path":"motion/connection.lua"}},{"name":"UntilDestroyed","desc":"Registers the connection to be cleaned up when a provided token object is disposed.\\n\\nThe token should be a table that has or will have a `__connectionCleanupCallbacks` array field.\\nThis allows grouping multiple connections to clean up together.","params":[{"name":"token","desc":"The cleanup token to register with.","lua_type":"{ __connectionCleanupCallbacks: { () -> () } }?"}],"returns":[],"function_type":"method","source":{"line":98,"path":"motion/connection.lua"}}],"properties":[],"types":[],"name":"Connection","desc":"Represents a link between a signal and a listener callback.\\nCalling `Disconnect()` will remove the listener from the signal.","source":{"line":14,"path":"motion/connection.lua"}}')}}]);