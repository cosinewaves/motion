"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[897],{3036:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Create a new signal","params":[],"returns":[{"desc":"","lua_type":"Signal<T...>"}],"function_type":"static","source":{"line":29,"path":"motion/init.lua"}},{"name":"Connect","desc":"Connect a signal to a callback function, which will automatically be called when your signal is Fired.","params":[{"name":"callback","desc":"Your callback function","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":42,"path":"motion/init.lua"}},{"name":"Once","desc":"Disconnect a callback function after it has been fired.","params":[{"name":"callback","desc":"Your callback function","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":56,"path":"motion/init.lua"}},{"name":"Wait","desc":"Waits an amount of time before firing the signal.","params":[{"name":"timeoutSeconds","desc":"Defaults to one second if not provided","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"...T"}],"function_type":"method","source":{"line":72,"path":"motion/init.lua"}},{"name":"Fire","desc":"Dispatches the signal to all connected listeners.","params":[{"name":"...","desc":"","lua_type":"T..."}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":102,"path":"motion/init.lua"}},{"name":"DisconnectAll","desc":"Disconnects all connected listeners.","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":118,"path":"motion/init.lua"}},{"name":"Until","desc":"Listens until the predicate evaluates to true, then disconnects.","params":[{"name":"predicate","desc":"","lua_type":"((T...) -> boolean)"},{"name":"callback","desc":"","lua_type":"((T...) -> ())\\n"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":130,"path":"motion/init.lua"}},{"name":"WhileActive","desc":"Fires only when the check function evaluates to true.","params":[{"name":"check","desc":"","lua_type":"() -> boolean"},{"name":"callback","desc":"","lua_type":"(T...) -> ()"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":154,"path":"motion/init.lua"}},{"name":"ConnectForked","desc":"Fires the listener in a separate task using task.spawn, ensuring parallel execution.","params":[{"name":"callback","desc":"","lua_type":"(T...) -> ()"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":171,"path":"motion/init.lua"}},{"name":"ConnectDeferred","desc":"Defers execution using task.defer, waiting until the current thread completes.","params":[{"name":"callback","desc":"","lua_type":"(T...) -> ()"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":184,"path":"motion/init.lua"}},{"name":"ConnectAsync","desc":"Wraps the listener in a coroutine for concurrent execution.","params":[{"name":"callback","desc":"","lua_type":"(T...) -> ()"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":197,"path":"motion/init.lua"}},{"name":"FireDeferred","desc":"Fires the signal using `task.defer`, ensuring it runs after the current execution thread completes.","params":[{"name":"...","desc":"","lua_type":"T..."}],"returns":[],"function_type":"method","source":{"line":209,"path":"motion/init.lua"}},{"name":"FireAsync","desc":"Fires the signal asynchronously using `task.spawn`, reducing potential performance bottlenecks.","params":[{"name":"...","desc":"","lua_type":"T..."}],"returns":[],"function_type":"method","source":{"line":219,"path":"motion/init.lua"}},{"name":"FireBatched","desc":"Fires multiple sets of arguments in batch mode. Each value set is dispatched in sequence using `task.spawn`.","params":[{"name":"...","desc":"","lua_type":"T... Multiple tables of arguments (each a {T...})"}],"returns":[],"function_type":"method","source":{"line":229,"path":"motion/init.lua"}},{"name":"FireWithMiddleware","desc":"Fires the signal through any registered middleware before invoking listeners.","params":[{"name":"...","desc":"","lua_type":"T..."}],"returns":[],"function_type":"method","source":{"line":244,"path":"motion/init.lua"}},{"name":"Use","desc":"Applies a custom middleware to intercept signal execution. Only one middleware can be active at a time.","params":[{"name":"middleware","desc":"","lua_type":"(next: (T...) -> (), ...T) -> ()"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":262,"path":"motion/init.lua"}},{"name":"UseFilter","desc":"Filters events based on a predicate. Only events that return `true` are allowed through.","params":[{"name":"predicate","desc":"","lua_type":"(T...) -> boolean"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":283,"path":"motion/init.lua"}},{"name":"UseMap","desc":"Transforms signal arguments before they are passed to listeners.","params":[{"name":"mapper","desc":"","lua_type":"(T...) -> U..."}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":298,"path":"motion/init.lua"}},{"name":"UseThrottle","desc":"Throttles the signal, allowing it to fire at most once per given time interval.","params":[{"name":"seconds","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":311,"path":"motion/init.lua"}},{"name":"UseDebounce","desc":"Debounces the signal. Only fires after no new signal is received within the given time frame.","params":[{"name":"seconds","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":329,"path":"motion/init.lua"}},{"name":"UseDelay","desc":"Delays the signal by the specified amount of time before calling listeners.","params":[{"name":"seconds","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":349,"path":"motion/init.lua"}},{"name":"UseLog","desc":"Logs signal firings to the console for debugging purposes.","params":[{"name":"prefix","desc":"","lua_type":"string? Optional log prefix"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":365,"path":"motion/init.lua"}},{"name":"UseCatch","desc":"Wraps signal execution in a `pcall`, catching and handling any runtime errors.","params":[{"name":"handler","desc":"","lua_type":"(any) -> () Error handler callback"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":379,"path":"motion/init.lua"}},{"name":"UseCancel","desc":"Cancels the signal if the given predicate returns `true`.","params":[{"name":"predicate","desc":"","lua_type":"(T...) -> boolean"}],"returns":[{"desc":"","lua_type":"MiddlewareHandle"}],"function_type":"method","source":{"line":397,"path":"motion/init.lua"}},{"name":"GetListenerCount","desc":"Returns the number of active listeners connected to the signal.","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":411,"path":"motion/init.lua"}},{"name":"GetConnections","desc":"Returns a list of all connection handles attached to this signal.","params":[],"returns":[{"desc":"","lua_type":"{ Connection }"}],"function_type":"method","source":{"line":429,"path":"motion/init.lua"}},{"name":"DebugDescribe","desc":"Returns a string summary of the signal\'s current listener state.","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":445,"path":"motion/init.lua"}},{"name":"PrintDebugInfo","desc":"Prints detailed debug information about the signal and its listeners.","params":[],"returns":[],"function_type":"method","source":{"line":455,"path":"motion/init.lua"}},{"name":"IsConnected","desc":"Checks if the given callback is currently connected to the signal.","params":[{"name":"callback","desc":"","lua_type":"(T...) -> ()"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":471,"path":"motion/init.lua"}}],"properties":[],"types":[],"name":"Signal","desc":"Motion is a lightweight, modular signal system built for event-driven programming in Lua. This release introduces a complete set of connection management, middleware utilities, and event firing capabilities to streamline reactive workflows.","source":{"line":15,"path":"motion/init.lua"}}')}}]);